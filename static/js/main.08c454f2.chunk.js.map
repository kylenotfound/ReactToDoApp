{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","className","onSubmit","e","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","target","ref","Todo","todos","completeTodo","removeTodo","editTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","todoId","newValue","prev","item","removeArr","filter","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAuCeA,MArCf,SAAkBC,GAChB,MAA0BC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAAnE,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAWC,iBAAO,MAqBxB,OAnBAC,qBAAU,WACRF,EAASG,QAAQC,WAmBjB,uBAAMC,UAAU,YAAYC,SAZR,SAAAC,GACpBA,EAAEC,iBAEFd,EAAMY,SAAS,CACXG,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMf,IAGVC,EAAS,KAIT,UACE,uBAAOe,KAAK,OACVC,YAAY,kBACZlB,MAAOC,EACPkB,KAAK,OACLX,UAAU,aACVY,SAtBe,SAAAV,GACnBR,EAASQ,EAAEW,OAAOrB,QAsBdsB,IAAKnB,IACL,wBAAQK,UAAU,cAAlB,uB,eCaOe,MA1Cf,YAA4D,IAA7CC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,SAG9C,EAAwB7B,mBAAS,CAC7Bc,GAAI,KACJZ,MAAO,KAFX,mBAAOD,EAAP,KAAa6B,EAAb,KAcA,OAAI7B,EAAKa,GACA,cAAC,EAAD,CAAUb,KAAMA,EAAMU,SAVV,SAAAT,GACjB2B,EAAS5B,EAAKa,GAAIZ,GAClB4B,EAAQ,CACJhB,GAAI,KACJZ,MAAO,QAURwB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACf,sBAAKvB,UAAWsB,EAAKE,WAAa,oBAAsB,WAAxD,UAEE,qBAAmBC,QAAS,kBAAMR,EAAaK,EAAKlB,KAApD,SACGkB,EAAKd,MADEc,EAAKlB,IAGf,sBAAKJ,UAAU,QAAf,UACE,cAAC,IAAD,CACEyB,QAAS,kBAAMP,EAAWI,EAAKlB,KAC/BJ,UAAU,gBAEZ,cAAC,IAAD,CACEyB,QAAS,kBAAML,EAAQ,CAAChB,GAAIkB,EAAKlB,GAAIZ,MAAO8B,EAAKd,QACjDR,UAAU,mBAXXuB,OC0BMG,MAnDf,SAAkBrC,GAEhB,MAA0BC,mBAAS,IAAnC,mBAAO0B,EAAP,KAAcW,EAAd,KAmCA,OACE,gCACE,kEACA,cAAC,EAAD,CAAU1B,SAnCG,SAAAqB,GACf,GAAKA,EAAKd,OAAQ,QAAQoB,KAAKN,EAAKd,MAApC,CAIA,IAAMqB,EAAQ,CAAIP,GAAJ,mBAAaN,IAC3BW,EAASE,OA8BP,cAAC,EAAD,CACEb,MAAOA,EACPC,aAhBe,SAAAb,GACnB,IAAI0B,EAAed,EAAMK,KAAI,SAAAC,GAI3B,OAHIA,EAAKlB,KAAOA,IACdkB,EAAKE,YAAcF,EAAKE,YAEnBF,KAETK,EAASG,IAULX,SA7BW,SAACY,EAAQC,GACnBA,EAASxB,OAAQ,QAAQoB,KAAKI,EAASxB,OAG5CmB,GAAS,SAAAM,GAAI,OAAIA,EAAKZ,KAAI,SAAAa,GAAI,OAAKA,EAAK9B,KAAO2B,EAASC,EAAWE,SA0B/DhB,WAvBa,SAAAd,GACf,IAAM+B,EAAY,YAAInB,GAAOoB,QAAO,SAAAd,GAAI,OAAIA,EAAKlB,KAAOA,KACxDuB,EAASQ,UChBAE,MATf,WACE,OACE,sBAAKrC,UAAU,WAAf,UACE,2CACA,cAAC,EAAD,QCFNsC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.08c454f2.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\r\n\r\nfunction TodoForm(props) {\r\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();   //automatically puts our cursor in the input box\r\n  });\r\n\r\n  const handleChange = e => {\r\n    setInput(e.target.value);\r\n  }\r\n\r\n  const handleNewTodo = e => {\r\n    e.preventDefault(); //prevent submit button from refreshing tab\r\n    \r\n    props.onSubmit({\r\n        id: Math.floor(Math.random() * 1000), //create an id for the new To Do. We need an id to refernece for editing, removing etc.\r\n        text: input\r\n    });\r\n\r\n    setInput('');\r\n  };  \r\n\r\n  return (\r\n    <form className=\"todo-form\" onSubmit={handleNewTodo}>\r\n      <input type=\"text\" \r\n        placeholder=\"Enter a task...\" \r\n        value={input} \r\n        name=\"text\" \r\n        className=\"todo-input\"\r\n        onChange={handleChange}\r\n        ref={inputRef}/>\r\n        <button className=\"todo-button\">Enter</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default TodoForm\r\n","import React, {useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport {RiCloseCircleLine} from 'react-icons/ri';\r\nimport {TiEdit} from 'react-icons/ti';\r\n\r\nfunction Todo({todos, completeTodo, removeTodo, editTodo}) {\r\n  \r\n  /** Utilize State to allow an item to be edited */\r\n  const [edit, setEdit] = useState({\r\n      id: null,\r\n      value: ''\r\n  });\r\n  \r\n  const submitUpdate = value => {\r\n      editTodo(edit.id, value);\r\n      setEdit({\r\n          id: null,\r\n          value: ''\r\n      });\r\n  };\r\n\r\n\r\n  if (edit.id) {\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n\r\n  return todos.map((todo, index) => (\r\n    <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'} \r\n    key={index}>\r\n      <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n        {todo.text}\r\n      </div>\r\n      <div className=\"icons\">\r\n        <RiCloseCircleLine\r\n          onClick={() => removeTodo(todo.id)}\r\n          className='delete-icon'\r\n        />\r\n        <TiEdit\r\n          onClick={() => setEdit({id: todo.id, value: todo.text})}\r\n          className='edit-icon'\r\n        />        \r\n      </div>  \r\n    </div>\r\n  ))\r\n}\r\n\r\nexport default Todo\r\n","import React, {useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport Todo from './Todo'\r\n\r\nfunction TodoList(props) {\r\n\r\n  const [todos, setTodos] = useState([]);\r\n  \r\n  /** A const function that handles adding a Todo to the list */\r\n  const addTodos = todo =>  {\r\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n      return;   //some fancy stuff to handle formatting of the entry of a todo\r\n    }\r\n\r\n    const newTodos = [todo, ...todos];\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  /** A const function that handles editinga Todo to the list */\r\n  const editTodo = (todoId, newValue) => {\r\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n      return;   //some fancy stuff to handle formatting of the entry of a todo\r\n    }\r\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n  };\r\n\r\n  const removeTodo = id => {\r\n      const removeArr = [...todos].filter(todo => todo.id !== id);\r\n      setTodos(removeArr);\r\n  }\r\n\r\n  const completeTodo = id => {\r\n    let updatedTodos = todos.map(todo => {\r\n      if (todo.id === id) {\r\n        todo.isComplete = !todo.isComplete\r\n      }\r\n      return todo;\r\n    })\r\n    setTodos(updatedTodos);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>What is on the agenda for today?</h2>\r\n      <TodoForm onSubmit={addTodos}/>\r\n      <Todo \r\n        todos={todos}\r\n        completeTodo={completeTodo}\r\n        editTodo={editTodo}\r\n        removeTodo={removeTodo}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoList\r\n","import './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className='todo-app'>\n      <h1>To Do App</h1>\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}